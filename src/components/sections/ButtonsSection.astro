---
import Button from "../Button.astro";
import GarbageIcon from "../icons/GarbageIcon.astro";
import Heading from "../Heading.astro";
import SuccessIcon from "../icons/SuccessIcon.astro";
import WarningIcon from "../icons/WarningIcon.astro";
import CodeCustom from "../CodeCustom.astro";
---

<section class="space-y-4 pt-24">
  <hgroup class="mb-12 text-balance">
    <Heading
      level="h2"
      size="3xl"
      >Buttons</Heading
    >
    <p>
      This component should look familiar if you've ever used shadcn/ui. While
      you <em>can</em> use shadcn/ui, I prefer not to as there is no need for every
      component to be a React component.
    </p>
  </hgroup>
  <div class="flex gap-4 flex-wrap">
    <Button>Default</Button>
    <Button variant="destructive"><GarbageIcon />Destructive</Button>
    <Button variant="warning"><WarningIcon />Warning</Button>
    <Button variant="success"><SuccessIcon />Success</Button>
    <Button variant="outline">Outline</Button>
    <Button variant="secondary">Secondary</Button>
    <Button variant="ghost">Ghost</Button>
    <Button variant="link">Link</Button>
  </div>
  <CodeCustom
    lang="astro"
    code={`---
import clsx from "clsx";

interface Props {
  variant?:
    | "default"
    | "destructive"
    | "warning"
    | "success"
    | "outline"
    | "secondary"
    | "ghost"
    | "link";
  size?: "default" | "sm" | "lg" | "icon";
  class?: string;
}

const {
  variant = "default",
  size = "default",
  class: className,
  ...props
} = Astro.props;

const buttonVariants = {
  base: "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-bold transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  variant: {
    default: "bg-primary text-primary-foreground shadow hover:bg-primary/90",
    destructive:
      "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
    warning: "bg-warning text-warning-foreground shadow-sm hover:bg-warning/90",
    success: "bg-success text-success-foreground shadow-sm hover:bg-success/90",
    outline:
      "border border-border bg-background shadow-sm hover:bg-accent hover:text-foreground hover:border-foreground",
    secondary:
      "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80 hover:text-foreground",
    ghost: "hover:bg-accent hover:text-foreground",
    link: "text-primary underline-offset-4 hover:underline",
  },
  size: {
    default: "h-9 px-4 py-2",
    sm: "h-8 rounded-md px-3 text-xs",
    lg: "h-10 rounded-md px-8",
    icon: "h-9 w-9",
  },
};
---

<button
  class={clsx(
    buttonVariants.base,
    buttonVariants.variant[variant],
    buttonVariants.size[size],
    className,
  )}
  {...props}>
  <slot />
</button>
`}
  />
</section>
